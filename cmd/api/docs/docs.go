// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "after user login user will seen this page with user informations",
                "tags": [
                    "Home"
                ],
                "summary": "api for user home page",
                "operationId": "User Home",
                "responses": {
                    "200": {
                        "description": "Welcome to home !"
                    }
                }
            }
        },
        "/account": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Account"
                ],
                "summary": "api for see user details",
                "operationId": "Account",
                "responses": {
                    "200": {
                        "description": "Successfully user account details found"
                    },
                    "500": {
                        "description": "faild to show user details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/account/address": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get a new address from user to store the the database",
                "tags": [
                    "User Address"
                ],
                "summary": "api for adding a new address for user",
                "operationId": "AddAddress",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Address"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully address added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "inavlid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin": {
            "get": {
                "tags": [
                    "Admin Home"
                ],
                "summary": "api admin home",
                "operationId": "AdminHome",
                "responses": {
                    "200": {
                        "description": "Welcome to Admin Home",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/login": {
            "post": {
                "tags": [
                    "Admin Login"
                ],
                "summary": "api for admin to login",
                "operationId": "AdminLogin",
                "parameters": [
                    {
                        "description": "Credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to login",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Generate JWT failure",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products": {
            "put": {
                "tags": [
                    "Admin Product"
                ],
                "summary": "api for admin to delete a product",
                "operationId": "UpdateProduct",
                "parameters": [
                    {
                        "description": "inputs",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.DeleteProductReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfuly deleted product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Missing or invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin Brand / Category"
                ],
                "summary": "api for admin to add a parent category or child brand",
                "operationId": "AddCategory",
                "parameters": [
                    {
                        "description": "inputs",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CategoryReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfuly added a new brand/Category in database",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid entry",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products/product-item": {
            "post": {
                "tags": [
                    "Admin Product"
                ],
                "summary": "api for admin to add product item for particular product",
                "operationId": "AddProductItem",
                "parameters": [
                    {
                        "description": "inputs",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ProductItemReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product item added successful",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to add product item",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "tags": [
                    "Admin User"
                ],
                "summary": "api for admin to list users",
                "operationId": "ListUsers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List user successful",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get all users",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/block": {
            "patch": {
                "tags": [
                    "Admin User"
                ],
                "summary": "api for admin to block or unblock user",
                "operationId": "BlockUser",
                "parameters": [
                    {
                        "description": "inputs",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UserID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed user block_status",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/brands": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Product brands"
                ],
                "summary": "api for admin to list all brands",
                "operationId": "ListBrands-admin",
                "responses": {
                    "200": {
                        "description": "Successfuly listed all brands",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to get brands",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/cart": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can get cart items",
                "tags": [
                    "User GetCartItems"
                ],
                "summary": "api for user to get cart items",
                "operationId": "UserGetCartItems",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfuly get cart items"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can update a stock in product to cart",
                "tags": [
                    "User Cart"
                ],
                "summary": "api for update user cart",
                "operationId": "UpdateCart",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateCartReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfuly updated product item in cart"
                    },
                    "500": {
                        "description": "Something went wrong!"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can delete a stock in product to cart",
                "tags": [
                    "User Cart"
                ],
                "summary": "api for delete product item from cart",
                "operationId": "DeleteCartItem",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.DeleteCartItemReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfuly deleted product item from cart"
                    },
                    "500": {
                        "description": "Something went wrong!"
                    }
                }
            }
        },
        "/carts/place-order/cod": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Cart"
                ],
                "summary": "api for user to place an order on cart with COD",
                "operationId": "PlaceCODOrder",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment option ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully order placed in COD",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Something went wrong! ",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Login"
                ],
                "summary": "api for user login",
                "operationId": "UserLogin",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid entry",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Something went wrong !",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can logout",
                "tags": [
                    "User Logout"
                ],
                "summary": "api for user to logout",
                "operationId": "UserLogout",
                "responses": {
                    "200": {
                        "description": "Log out successful"
                    }
                }
            }
        },
        "/otp-verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User OTP verification"
                ],
                "summary": "api for user otp verification",
                "operationId": "UserOtpVerify",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OTPVerify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid entry",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to send OTP",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Products"
                ],
                "summary": "api for user to list all products",
                "operationId": "ListProducts-User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product listed successfuly",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get all products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Signup"
                ],
                "summary": "api for register user",
                "operationId": "UserSignUp",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.SignupUserData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account created successfuly"
                    },
                    "400": {
                        "description": "invalid entry"
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Address": {
            "type": "object",
            "required": [
                "address_line_1",
                "address_line_2",
                "city",
                "country",
                "state",
                "zip_code"
            ],
            "properties": {
                "address_line_1": {
                    "type": "string",
                    "maxLength": 40,
                    "minLength": 2
                },
                "address_line_2": {
                    "type": "string",
                    "maxLength": 40,
                    "minLength": 2
                },
                "city": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2
                },
                "country": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2
                },
                "createdAt": {
                    "type": "string"
                },
                "house": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "state": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2
                },
                "updatedAt": {
                    "type": "string"
                },
                "zip_code": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 2
                }
            }
        },
        "domain.Admin": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 5
                },
                "updated_at": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 4
                }
            }
        },
        "request.AddToCartReq": {
            "type": "object",
            "required": [
                "product_item_id",
                "quantity"
            ],
            "properties": {
                "product_item_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request.CategoryReq": {
            "type": "object",
            "properties": {
                "brand_category_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "parent_id": {
                    "type": "integer"
                }
            }
        },
        "request.DeleteCartItemReq": {
            "type": "object",
            "required": [
                "product_item_id"
            ],
            "properties": {
                "product_item_id": {
                    "type": "integer"
                }
            }
        },
        "request.DeleteProductReq": {
            "type": "object",
            "required": [
                "Prod_id"
            ],
            "properties": {
                "Prod_id": {
                    "type": "integer"
                }
            }
        },
        "request.LoginData": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 5
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "request.OTPVerify": {
            "type": "object",
            "required": [
                "otp",
                "user_id"
            ],
            "properties": {
                "otp": {
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 4
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request.ProductItemReq": {
            "type": "object",
            "required": [
                "SKU",
                "configurations",
                "images",
                "product_id",
                "qty_in_stock"
            ],
            "properties": {
                "SKU": {
                    "type": "string"
                },
                "configurations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/request.Variation"
                    }
                },
                "discount_price": {
                    "type": "integer"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "price": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "qty_in_stock": {
                    "type": "integer"
                }
            }
        },
        "request.ProductReq": {
            "type": "object",
            "required": [
                "brand_id",
                "description",
                "image",
                "price",
                "product_name"
            ],
            "properties": {
                "brand_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 10
                },
                "image": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "request.SignupUserData": {
            "type": "object",
            "required": [
                "age",
                "confirm_password",
                "email",
                "first_name",
                "last_name",
                "password",
                "phone",
                "user_name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "request.UpdateCartReq": {
            "type": "object",
            "required": [
                "product_item_id",
                "quantity"
            ],
            "properties": {
                "product_item_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "request.UpdateProductReq": {
            "type": "object",
            "properties": {
                "brand_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                }
            }
        },
        "request.UserID": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request.Variation": {
            "type": "object",
            "properties": {
                "variation_option_id": {
                    "type": "integer"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "errors": {},
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
