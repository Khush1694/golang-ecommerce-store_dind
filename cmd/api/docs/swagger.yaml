definitions:
  domain.Admin:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        maxLength: 30
        minLength: 5
        type: string
      updated_at:
        type: string
      user_name:
        maxLength: 15
        minLength: 4
        type: string
    required:
    - password
    type: object
  request.AddToCartReq:
    properties:
      product_item_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    required:
    - product_item_id
    - quantity
    type: object
  request.CategoryReq:
    properties:
      brand_category_name:
        type: string
      id:
        type: integer
      parent_id:
        type: integer
    type: object
  request.DeleteProductReq:
    properties:
      Prod_id:
        type: integer
    required:
    - Prod_id
    type: object
  request.LoginData:
    properties:
      email:
        type: string
      password:
        maxLength: 30
        minLength: 5
        type: string
      user_name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - password
    type: object
  request.OTPVerify:
    properties:
      otp:
        maxLength: 8
        minLength: 4
        type: string
      user_id:
        type: integer
    required:
    - otp
    - user_id
    type: object
  request.ProductItemReq:
    properties:
      SKU:
        type: string
      configurations:
        additionalProperties:
          $ref: '#/definitions/request.Variation'
        type: object
      discount_price:
        type: integer
      images:
        items:
          type: string
        type: array
      price:
        type: integer
      product_id:
        type: integer
      qty_in_stock:
        type: integer
    required:
    - SKU
    - configurations
    - images
    - product_id
    - qty_in_stock
    type: object
  request.ProductReq:
    properties:
      brand_id:
        type: integer
      description:
        maxLength: 1000
        minLength: 10
        type: string
      image:
        type: string
      price:
        type: integer
      product_name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - brand_id
    - description
    - image
    - price
    - product_name
    type: object
  request.SignupUserData:
    properties:
      age:
        type: integer
      confirm_password:
        type: string
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 1
        type: string
      password:
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - age
    - confirm_password
    - email
    - first_name
    - last_name
    - password
    - phone
    - user_name
    type: object
  request.UpdateProductReq:
    properties:
      brand_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      price:
        type: integer
      product_name:
        type: string
    type: object
  request.Variation:
    properties:
      variation_option_id:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      errors: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact: {}
paths:
  /:
    get:
      description: after user login user will seen this page with user informations
      operationId: User Home
      responses:
        "200":
          description: Welcome to home !
      security:
      - ApiKeyAuth: []
      summary: api for user home page
      tags:
      - Home
  /admin:
    get:
      operationId: AdminHome
      responses:
        "200":
          description: Welcome to Admin Home
          schema:
            $ref: '#/definitions/response.Response'
      summary: api admin home
      tags:
      - Admin Home
  /admin/login:
    post:
      operationId: AdminLogin
      parameters:
      - description: Credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.LoginData'
      responses:
        "200":
          description: successfully logged in
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to login
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Generate JWT failure
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to login
      tags:
      - Admin Login
  /admin/products:
    post:
      operationId: AddCategory
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CategoryReq'
      responses:
        "200":
          description: Successfuly added a new brand/Category in database
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid entry
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to add a parent category or child brand
      tags:
      - Admin Brand / Category
    put:
      operationId: UpdateProduct
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.DeleteProductReq'
      responses:
        "200":
          description: Successfuly deleted product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to delete a product
      tags:
      - Admin Product
  /admin/products/product-item:
    post:
      operationId: AddProductItem
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ProductItemReq'
      responses:
        "200":
          description: Product item added successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to add product item
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to add product item for particular product
      tags:
      - Admin Product
  /admin/users:
    get:
      operationId: ListUsers
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: List user successful
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get all users
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to list users
      tags:
      - Admin User
  /brands:
    get:
      operationId: ListBrands-admin
      responses:
        "200":
          description: Successfuly listed all brands
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to get brands
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin to list all brands
      tags:
      - Product brands
  /cart:
    post:
      description: user can add a stock in product to cart
      operationId: AddToCart
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.AddToCartReq'
      responses:
        "200":
          description: 'Successfuly added product item to cart '
        "400":
          description: Failed to add product item in cart
      security:
      - ApiKeyAuth: []
      summary: api for add product item to user cart
      tags:
      - User Cart
  /login:
    post:
      operationId: UserLogin
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.LoginData'
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid entry
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong !
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user login
      tags:
      - User Login
  /logout:
    post:
      description: user can logout
      operationId: UserLogout
      responses:
        "200":
          description: Log out successful
      security:
      - ApiKeyAuth: []
      summary: api for user to logout
      tags:
      - User Logout
  /otp-verify:
    post:
      operationId: UserOtpVerify
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.OTPVerify'
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid entry
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to send OTP
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user otp verification
      tags:
      - User OTP verification
  /products:
    get:
      operationId: ListProducts-User
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Product listed successfuly
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get all products
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to list all products
      tags:
      - User Products
  /signup:
    post:
      operationId: UserSignUp
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.SignupUserData'
      responses:
        "200":
          description: Account created successfuly
        "400":
          description: invalid entry
      security:
      - ApiKeyAuth: []
      summary: api for register user
      tags:
      - User Signup
swagger: "2.0"
